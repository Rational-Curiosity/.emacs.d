#+TITLE:  Emacs Configuration File
#+AUTHOR: e
#+EMAIL:  no-reply@
#+PROPERTY:  header-args:elisp   :results silent
#+PROPERTY:  header-args:elisp+  :tangle ~/.emacs.d/early-init.el
#+PROPERTY:  header-args:elisp+  :eval no-export
# Save to tangle file: C-c C-v C-t

* Persist *Messages* buffer to file

#+begin_src elisp
(defun save-messages-buffer ()
  (with-current-buffer "*Messages*"
    (set-buffer-file-coding-system 'raw-text)
    (let ((coding-system-for-write 'no-conversion))
      (write-region (point-min) (point-max)
                    (expand-file-name "last-messages-buffer.txt"
                                      user-emacs-directory)))))
(add-hook 'kill-emacs-hook 'save-messages-buffer 92)
#+end_src

* Early command line arguments

#+begin_src elisp
(defvar exwm-p
  (if (member "--exwm" command-line-args)
      (progn
        (defvar last-startup-hook 'exwm-init-hook)
        t)
    (defvar last-startup-hook 'emacs-startup-hook)
    nil))
#+end_src

* Performance

#+begin_src elisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs loaded in %.2f seconds with %d garbage collections"
                     (float-time (time-subtract after-init-time before-init-time))
                     gcs-done))
          100)
#+end_src

** Benchmark startup advising ~require~

#+begin_src elisp
(when (member "--benchmark" command-line-args)
  (defvar benchmark-last-time (current-time))
  (defvar benchmark-last-feature "early-init")
  (defvar benchmark-buffer (generate-new-buffer "*Benchmarks*"))
  (require 'time-date)
  (defun benchmark-require-advice (orig-fun feature &optional filename noerror)
    (let* ((time (float-time (time-since benchmark-last-time)))
           (initial-time (current-time))
           (result (funcall orig-fun feature filename noerror))
           (require-time (float-time (time-since initial-time))))
      (with-current-buffer benchmark-buffer
        (insert (format "%fs  between `%s' and `%s'\n%fs  loading `%s'\n"
                        time benchmark-last-feature feature
                        require-time feature)))
      (setq benchmark-last-time (current-time)
            benchmark-last-feature feature)
      result))
  (advice-add 'require :around 'benchmark-require-advice)
  (add-hook 'emacs-startup-hook
            (lambda ()
              (advice-remove 'require 'benchmark-require-advice))))
#+end_src

** Better control of garbage collection

#+begin_src elisp
;; (add-hook (if exwm-p
;;               'exwm-init-hook
;;            'emacs-startup-hook)
;;           `(lambda ()
;;              (setq gc-cons-percentage ,gc-cons-percentage
;;                    gc-cons-threshold ,gc-cons-threshold))
;;           t)
;; (setq gc-cons-percentage 0.6
;;       gc-cons-threshold (eval-when-compile
;;                           (* 10 1024 1024)))

;; (defun gcmh-idle-garbage-collect-advice (orig-fun)
;;   (unless (or ;; cursor-in-echo-area
;;            prefix-arg
;;            (< 0 (length (this-single-command-keys)))
;;            (active-minibuffer-window))
;;     (funcall orig-fun)))
;; (advice-add 'gcmh-idle-garbage-collect :around 'gcmh-idle-garbage-collect-advice)

(add-hook 'after-init-hook
          (lambda ()
            (defun post-gc-truncate-buffers ()
              (comint-truncate-buffers "^\\*EGLOT (.*) \\(stderr\\|output\\)\\*$" t))
            (add-hook 'post-gc-hook 'post-gc-truncate-buffers)))
#+end_src

** Don't handle file names before init or while require

#+begin_src elisp
(setq jka-compr-load-suffixes nil)
(jka-compr-update)
(defun jka-enable-gz ()
  (interactive)
  (unless (member ".gz" jka-compr-load-suffixes)
    (push ".gz" jka-compr-load-suffixes)
    (jka-compr-update)))
(defun find-library-name-advice (orig-fun library)
  (condition-case err
      (funcall orig-fun library)
    (error (if (member ".gz" jka-compr-load-suffixes)
               (signal (car err) (cdr err))
             (push ".gz" jka-compr-load-suffixes)
             (jka-compr-update)
             (funcall orig-fun library)))))
(advice-add 'find-library-name :around 'find-library-name-advice)

(add-hook 'after-init-hook
          `(lambda ()
             (setq file-name-handler-alist (quote ,file-name-handler-alist))))
(setq file-name-handler-alist nil)

(defun avoid-file-handler-require-advice (orig-fun &rest args)
  (let (file-name-handler-alist)
    (apply orig-fun args)))
(advice-add #'require :around 'avoid-file-handler-require-advice)
#+end_src

** Long lines performance

#+begin_src elisp
(setq-default bidi-paragraph-direction 'left-to-right)
(setq bidi-inhibit-bpa t)
(global-so-long-mode 1)
#+end_src

** CANC Fast pager
:PROPERTIES:
:header-args:elisp: :tangle no
:END:

#+begin_src elisp
(defvar-local fast-pager-column-goal 0)

(defun fast-pager-store-column ()
  (if (not (memq last-command '(fast-pager-page-down fast-pager-page-up fast-pager-row-up fast-pager-row-down)))
      (setq fast-pager-column-goal (current-column))))

(defun fast-pager-restore-column ()
  (move-to-column fast-pager-column-goal))

(defun fast-line-move (lines)
  (unless (line-move-1 lines t)
    (if (> lines 0)
        (goto-char (point-max))
        (goto-char (point-min)))))

(defun fast-pager-scroll-screen (lines)
  (save-excursion
    (goto-char (window-start))
    (fast-line-move lines)
    (set-window-start (selected-window) (point)))
  (fast-line-move lines))

(defun fast-pager-page-down ()
  (interactive)
  (fast-pager-store-column)
  (if (pos-visible-in-window-p (point-max))
      (goto-char (point-max))
      (fast-pager-scroll-screen (- (1- (window-height))
                                 next-screen-context-lines)))
  (fast-pager-restore-column))

(defun fast-pager-page-up ()
  (interactive)
  (fast-pager-store-column)
  (if (pos-visible-in-window-p (point-min))
      (goto-char (point-min))
      (fast-pager-scroll-screen (- next-screen-context-lines
                                 (1- (window-height))))
      (fast-pager-restore-column)))

(defun fast-pager-row-up ()
  (interactive)
  (fast-pager-store-column)
  (save-excursion
    (goto-char (window-start))
    (fast-line-move -1)
    (set-window-start (selected-window) (point)))
  (while (save-excursion
           (fast-line-move (+ scroll-margin 2))
           (>= (point) (window-end)))
    (fast-line-move -1))
  (fast-pager-restore-column))

(defun fast-pager-row-down ()
  (interactive)
  (fast-pager-store-column)
  (save-excursion
    (goto-char (window-start))
    (fast-line-move 1)
    (set-window-start (selected-window) (point)))
  (while (save-excursion
           (fast-line-move (- 0 scroll-margin))
           (< (point) (window-start)))
    (fast-line-move 1))
  (fast-pager-restore-column))

(global-set-key [remap scroll-up-command] 'fast-pager-page-down)
(global-set-key [remap scroll-down-command] 'fast-pager-page-up)
(global-set-key (kbd "<S-up>") 'fast-pager-row-up)
(global-set-key (kbd "C-S-p") 'fast-pager-row-up)
(global-set-key (kbd "<S-down>") 'fast-pager-row-down)
(global-set-key (kbd "C-S-n") 'fast-pager-row-down)
#+end_src

* Package management

Call ~package-quickstart-refresh~ every time ~package-load-list~ is
modified.

#+begin_src elisp
(require 'package)

(setq package-enable-at-startup nil
      ;; call `package-quickstart-refresh' every time `package-load-list'
      ;; is modified
      package-quickstart t)

;; [ <repos> configure repositories
;; (add-to-list 'package-archives '("ELPA" . "http://tromey.com/elpa/"))
;; (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

(let ((protocol (if (and (memq system-type '(windows-nt ms-dos))
                         (not (gnutls-available-p)))
                    "http"
                  "https"))
      (repos
       '(;;("org"          . "://orgmode.org/elpa/")
         ("nongnu"       . "://elpa.nongnu.org/nongnu/")
         ("melpa"        . "://melpa.org/packages/")
         ("melpa-stable" . "://stable.melpa.org/packages/")
         ;; package name conflict: `project'
         ;; ("marmalade"    . "://marmalade-repo.org/packages/")
         ;; obsolete
         ;; ("emacswiki"    . "://mirrors.tuna.tsinghua.edu.cn/elpa/emacswiki/")
         )))
  (mapc (lambda (p)
          (add-to-list
           'package-archives
           (cons (car p) (concat protocol (cdr p))) t))
        repos))

(package-initialize)
;; sort package list
(defun package--save-selected-packages-advice (orig-fun value)
  (funcall orig-fun (sort value 'string-lessp)))
(advice-add 'package--save-selected-packages :around #'package--save-selected-packages-advice)

(defun package-auto-install-remove ()
  (interactive)
  ;; install packages in list
  (let ((list-of-boolean (mapcar #'package-installed-p package-selected-packages)))
    (if (cl-every #'identity list-of-boolean)
        (message "Nothing to install")
      (progn
        (package-refresh-contents)
        (let ((list-of-uninstalled '()))
          (cl-mapc #'(lambda (a b)
                       (unless a
                         (set 'list-of-uninstalled (cons b list-of-uninstalled))))
                   list-of-boolean package-selected-packages)
          (mapc #'package-install list-of-uninstalled)))))
  ;; [ uninstall packages not in list
  ;; (mapc (lambda (pkg)
  ;;         (package-delete (cadr (assq pkg package-alist))))
  ;;       (cl-set-difference package-activated-list package-selected-packages))
  ;; ]
  (package-autoremove))

(defun package-require-all ()
  (interactive)
  (start-process "emacs-require-all" nil "setsid" "emacs" "--eval=\
(progn
  (mapcar
   (lambda (feature-str)
     (ignore-errors
       (message \"Requiring feature `%s'\" feature-str)
       (with-temp-buffer
         (require (intern feature-str) nil t))))
   (split-string
    (shell-command-to-string
     \"rg -NI --no-heading --color never \\\"\\\\(provide '([^\\\$%\\\\)]*)\\\\)\\\" -or '$1' ~/.emacs.d/elpa\")
     \"\\n\" t))
  (message \"All features required\"))"))

;; (add-hook (if exwm-p
;;               'exwm-init-hook
;;             'emacs-startup-hook)
;;           'package-auto-install-remove)

(defun package-from-url-update (&optional arg)
  (interactive "P")
  ;; ;; bookmark+
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+.el" t)
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b-mac.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+-mac.el" t)
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b-bmu.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+-bmu.el" t)
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b-1.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+-1.el" t)
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b-key.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+-key.el" t)
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b-lit.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+-lit.el" t)
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b-doc.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+-doc.el" t)
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/bookmark%2b-chg.el"
  ;;                "~/.emacs.d/el/packages/bookmark+/bookmark+-chg.el" t)
  ;; (byte-recompile-directory "~/.emacs.d/el/packages/bookmark+" 0 t)
  ;; ;; thingatpt+
  ;; (url-copy-file "https://www.emacswiki.org/emacs/download/thingatpt%2b.el"
  ;;                "~/.emacs.d/el/packages/thingatpt+/thingatpt+.el" t)
  ;; (byte-recompile-directory "~/.emacs.d/el/packages/thingatpt+" 0 t)
  ;; undo-tree
  (let ((packages
         '(;; vertico
           ("vertico-autoloads.el" "el/packages/vertico/"
            (("vertico.el" .
              "https://github.com/minad/vertico/raw/main/vertico.el")
             ("vertico-flat.el" .
              "https://github.com/minad/vertico/raw/main/extensions/vertico-flat.el")
             ("vertico-indexed.el" .
              "https://github.com/minad/vertico/raw/main/extensions/vertico-indexed.el")
             ("vertico-quick.el" .
              "https://github.com/minad/vertico/raw/main/extensions/vertico-quick.el")
             ("vertico-repeat.el" .
              "https://github.com/minad/vertico/raw/main/extensions/vertico-repeat.el")
             ("vertico-grid.el" .
              "https://github.com/minad/vertico/raw/main/extensions/vertico-grid.el")))
           ;; undo-tree
           ("undo-tree-autoloads.el" "el/packages/undo-tree/"
            (("undo-tree.el" .
              "https://gitlab.com/tsc25/undo-tree/-/raw/master/undo-tree.el")))
           )))
    (dolist (package packages)
      (let ((file-url-list
             (car (last package))))
        (when (cl-every (lambda (l)
                          (if (url-file-exists-p (cdr l))
                              t
                            (message "Url not found: %s" (cdr l))
                            nil))
                        file-url-list)
          (let ((package-directory (expand-file-name (cl-second package)
                                                     user-emacs-directory)))
            (dolist (file-url file-url-list)
              (make-directory package-directory t)
              (let ((dest (concat package-directory (car file-url))))
                (when (file-exists-p dest)
                  (rename-file dest (concat dest ".tmp") t))
                (url-copy-file (cdr file-url) dest t)))
            (byte-recompile-directory package-directory 0 t)
            (make-directory-autoloads
             package-directory
             (concat package-directory (cl-first package)))))))))
#+end_src

* Frame configuration previous GUI activation

#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
;; display hover help text in the echo area
(tooltip-mode -1)
(modify-all-frames-parameters '((vertical-scroll-bars . nil)))
(advice-add 'x-apply-session-resources :override 'ignore)

;; (fringe-mode '(4 . 4))
(set-face-attribute 'fringe nil
                    :background "#303030")
(setq-default indicate-buffer-boundaries 'right)
(defface visual-line-fringe-face
  '((t :foreground "gold1"))
  "Visual line fringe face" :group 'visual-line)
(set-fringe-bitmap-face 'left-curly-arrow 'visual-line-fringe-face)
(set-fringe-bitmap-face 'right-curly-arrow 'visual-line-fringe-face)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow)
      frame-inhibit-implied-resize t)
;; (add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src

* Theme config

#+begin_src elisp
;; (set 'custom-enabled-themes 'wheatgrass)
(condition-case nil
    (load-theme 'modus-vivendi t)
  (error
   (message "Modus vivendi theme not found")
   (condition-case nil
       (load-theme 'wombat t)
     (error
      (message "Wombat theme not found")))))
;; (face-attribute 'mode-line nil :background "#003445")
(add-to-list 'default-frame-alist '(cursor-color . "sky blue"))
(face-spec-set 'show-paren-match
               '((((class color) (background light))
                  :background "turquoise")
                 (((class color) (background dark))
                  :background "steelblue4")
                 (((background dark) (min-colors 4))
                  :background "grey50")
                 (((background light) (min-colors 4))
                  :background "gray")
                 (t
                  :inherit underline)))
(face-spec-set 'error
               '((default :weight bold)
                 (((class color) (min-colors 88) (background light)) :foreground "Red1")
                 (((class color) (min-colors 88) (background dark))  :foreground "magenta2")
                 (((class color) (min-colors 16) (background light)) :foreground "Red1")
                 (((class color) (min-colors 16) (background dark))  :foreground "magenta2")
                 (((class color) (min-colors 8)) :foreground "red")
                 (t :inverse-video t)))

;; (require 'cursor-chg)  ; Load this library
;; (change-cursor-mode 1) ; On for overwrite/read-only/input mode
;; (toggle-cursor-type-when-idle 1) ; On when idle
;; (setq curchg-idle-cursor-type 'hbar
;;       curchg-default-cursor-type 'bar
;;       curchg-overwrite/read-only-cursor-type 'box)

;; [ Cycle themes
(require 'ring)
(defvar theme-ring nil)
(let ((themes '(wombat whiteboard adwaita misterioso)))
  (setq theme-ring (make-ring (length themes)))
  (dolist (elem themes) (ring-insert theme-ring elem)))

(defun cycle-themes ()
  "Cycle themes in ring."
  (interactive)
  (let ((theme (ring-ref theme-ring -1)))
    (ring-insert theme-ring theme)
    (load-theme theme)
    (message "%s theme loaded" theme)))
;; ]

;; [ transparency
(defun frame-transparency (opacity)
  (interactive "P")
  (if opacity
      (when (listp opacity)
        (setq opacity 1))
    (setq opacity 0))
  (set-frame-parameter nil 'alpha `(,opacity . ,opacity)))

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              80)
         '(100 . 100) '(80 . 70)))))

(add-to-list 'default-frame-alist
             (if (intern-soft "alpha-background")
;; thanks to: https://github.com/TheVaffel/emacs
                 '(alpha-background . 60)
               '(alpha . (80 . 70))))
;; (set-frame-parameter (selected-frame) 'alpha '(90 . 75))
;; ]

(defun unspecified-background (&optional frame)
  (let ((frame (or frame (selected-frame))))
    (unless (display-graphic-p frame)
      (set-face-background 'default "unspecified-bg" frame))))
(add-hook 'window-setup-hook 'unspecified-background)
(add-hook 'after-make-frame-functions 'unspecified-background)

(global-set-key (kbd "M-s 6 t") #'cycle-themes)
(global-set-key (kbd "M-s 7 7") #'frame-transparency)
(global-set-key (kbd "M-s 7 t") #'toggle-transparency)
#+end_src

* Initial configurations

#+begin_src elisp
(setq initial-buffer-choice nil
      inhibit-startup-screen t
      initial-major-mode 'fundamental-mode
      visible-bell t
      history-delete-duplicates t
      debugger-bury-or-kill nil
      ;; avoids warnings
      ad-redefinition-action 'accept)
#+end_src
